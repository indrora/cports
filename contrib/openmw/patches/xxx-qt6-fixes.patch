commit 73577f5edc1a2990bfd5acf61c2670d85a8fa815
Author: q66 <q66@chimera-linux.org>
Date:   Sun Jul 23 22:53:11 2023 +0200

    more qt6 fixups

diff --git a/apps/launcher/maindialog.hpp b/apps/launcher/maindialog.hpp
index ca198ce..8bf8343 100644
--- a/apps/launcher/maindialog.hpp
+++ b/apps/launcher/maindialog.hpp
@@ -15,7 +15,6 @@
 
 class QListWidgetItem;
 class QStackedWidget;
-class QStringList;
 class QStringListModel;
 class QString;
 
diff --git a/apps/wizard/inisettings.cpp b/apps/wizard/inisettings.cpp
index 1e51d78..6226cb6 100644
--- a/apps/wizard/inisettings.cpp
+++ b/apps/wizard/inisettings.cpp
@@ -1,12 +1,13 @@
 #include "inisettings.hpp"
 
-#include <QTextStream>
 #include <QFile>
 #include <QStringList>
 #include <QString>
 #include <QRegularExpression>
 #include <QDebug>
 
+#include <fstream>
+
 Wizard::IniSettings::IniSettings()
 {
 }
@@ -30,7 +31,8 @@ QStringList Wizard::IniSettings::findKeys(const QString &text)
     return result;
 }
 
-bool Wizard::IniSettings::readFile(QTextStream &stream)
+bool Wizard::IniSettings::readFile(std::ifstream& stream, ToUTF8::FromType encoding)
+
 {
     // Look for a square bracket, "'\\["
     // that has one or more "not nothing" in it, "([^]]+)"
@@ -44,10 +46,20 @@ bool Wizard::IniSettings::readFile(QTextStream &stream)
 
     QString currentSection;
 
-    while (!stream.atEnd())
+    ToUTF8::Utf8Encoder encoder(encoding);
+
+    std::string legacyEncLine;
+    while (std::getline(stream, legacyEncLine))
     {
-        const QString line(stream.readLine());
+        std::string_view lineBuffer = encoder.getUtf8(legacyEncLine);
+
+        // unify Unix-style and Windows file ending
+        if (!(lineBuffer.empty()) && (lineBuffer[lineBuffer.length() - 1]) == '\r')
+        {
+            lineBuffer = lineBuffer.substr(0, lineBuffer.length() - 1);
+        }
 
+        const QString line = QString::fromStdString(std::string(lineBuffer));
         if (line.isEmpty() || line.startsWith(QLatin1Char(';')))
             continue;
 
@@ -75,7 +87,7 @@ bool Wizard::IniSettings::readFile(QTextStream &stream)
     return true;
 }
 
-bool Wizard::IniSettings::writeFile(const QString &path, QTextStream &stream)
+bool Wizard::IniSettings::writeFile(const QString& path, std::ifstream& stream, ToUTF8::FromType encoding)
 {
     // Look for a square bracket, "'\\["
     // that has one or more "not nothing" in it, "([^]]+)"
@@ -92,10 +104,19 @@ bool Wizard::IniSettings::writeFile(const QString &path, QTextStream &stream)
     QString currentSection;
     QString buffer;
 
-    while (!stream.atEnd()) {
+    ToUTF8::Utf8Encoder encoder(encoding);
 
-        const QString line(stream.readLine());
+    std::string legacyEncLine;
+    while (std::getline(stream, legacyEncLine))
+    {
+        std::string_view lineBuffer = encoder.getUtf8(legacyEncLine);
+        // unify Unix-style and Windows file ending
+        if (!(lineBuffer.empty()) && (lineBuffer[lineBuffer.length() - 1]) == '\r')
+        {
+            lineBuffer = lineBuffer.substr(0, lineBuffer.length() - 1);
+        }
 
+        const QString line = QString::fromStdString(std::string(lineBuffer));
         if (line.isEmpty() || line.startsWith(QLatin1Char(';'))) {
             buffer.append(line + QLatin1String("\n"));
             continue;
@@ -155,20 +176,12 @@ bool Wizard::IniSettings::writeFile(const QString &path, QTextStream &stream)
         }
     }
 
-    // Now we reopen the file, this time we write
-    QFile file(path);
-
-    if (file.open(QIODevice::ReadWrite | QIODevice::Truncate | QIODevice::Text)) {
-        QTextStream in(&file);
-        in.setEncoding(stream.encoding());
-
-        // Write the updated buffer to an empty file
-        in << buffer;
-        file.flush();
-        file.close();
-    } else {
+    std::ofstream file(path.toStdString(), std::ios::out);
+    if (file.fail())
         return false;
-    }
+
+    file << encoder.getLegacyEnc(buffer.toStdString());
+    file.close();
 
     return true;
 }
diff --git a/apps/wizard/inisettings.hpp b/apps/wizard/inisettings.hpp
index d425a9b..c4e914c 100644
--- a/apps/wizard/inisettings.hpp
+++ b/apps/wizard/inisettings.hpp
@@ -4,7 +4,7 @@
 #include <QHash>
 #include <QVariant>
 
-class QTextStream;
+#include <components/to_utf8/to_utf8.hpp>
 
 namespace Wizard
 {
@@ -39,8 +39,8 @@ namespace Wizard
 
         QStringList findKeys(const QString &text);
 
-        bool readFile(QTextStream &stream);
-        bool writeFile(const QString &path, QTextStream &stream);
+        bool readFile(std::ifstream& stream, ToUTF8::FromType encoding);
+        bool writeFile(const QString& path, std::ifstream& stream, ToUTF8::FromType encoding);
 
         bool parseInx(const QString &path);
 
diff --git a/apps/wizard/installationpage.cpp b/apps/wizard/installationpage.cpp
index 0df0dbb..87146be 100644
--- a/apps/wizard/installationpage.cpp
+++ b/apps/wizard/installationpage.cpp
@@ -1,6 +1,5 @@
 #include "installationpage.hpp"
 
-#include <QTextCodec>
 #include <QFileDialog>
 #include <QMessageBox>
 #include <QThread>
@@ -130,11 +129,11 @@ void Wizard::InstallationPage::startInstallation()
     QString language(field(QLatin1String("installation.language")).toString());
 
     if (language == QLatin1String("Polish")) {
-        mUnshield->setIniCodec(QTextCodec::codecForName("windows-1250"));
+        mUnshield->setIniEncoding(ToUTF8::FromType::WINDOWS_1250);
     } else if (language == QLatin1String("Russian")) {
-        mUnshield->setIniCodec(QTextCodec::codecForName("windows-1251"));
+        mUnshield->setIniEncoding(ToUTF8::FromType::WINDOWS_1251);
     }  else {
-        mUnshield->setIniCodec(QTextCodec::codecForName("windows-1252"));
+        mUnshield->setIniEncoding(ToUTF8::FromType::WINDOWS_1252);
     }
 
     mThread->start();
diff --git a/apps/wizard/unshield/unshieldworker.cpp b/apps/wizard/unshield/unshieldworker.cpp
index 8ff0690..150341e 100644
--- a/apps/wizard/unshield/unshieldworker.cpp
+++ b/apps/wizard/unshield/unshieldworker.cpp
@@ -4,11 +4,11 @@
 #include <QReadLocker>
 #include <QFileInfo>
 #include <QStringList>
-#include <QTextStream>
-#include <QTextCodec>
 #include <QFile>
 #include <QDir>
 
+#include <fstream>
+
 Wizard::UnshieldWorker::UnshieldWorker(qint64 expectedMorrowindBsaSize, QObject *parent) :
     QObject(parent),
     mExpectedMorrowindBsaSize(expectedMorrowindBsaSize),
@@ -21,7 +21,7 @@ Wizard::UnshieldWorker::UnshieldWorker(qint64 expectedMorrowindBsaSize, QObject
     mDiskPath = QString();
 
     // Default to Latin encoding
-    mIniCodec = QTextCodec::codecForName("windows-1252");
+    mIniEncoding = ToUTF8::FromType::WINDOWS_1252;
 
     mInstallMorrowind = false;
     mInstallTribunal = false;
@@ -151,10 +151,10 @@ QString Wizard::UnshieldWorker::getDiskPath()
 }
 
 
-void Wizard::UnshieldWorker::setIniCodec(QTextCodec *codec)
+void Wizard::UnshieldWorker::setIniEncoding(ToUTF8::FromType encoding)
 {
     QWriteLocker writeLock(&mLock);
-    mIniCodec = codec;
+    mIniEncoding = encoding;
 }
 
 void Wizard::UnshieldWorker::wakeAll()
@@ -168,18 +168,15 @@ bool Wizard::UnshieldWorker::setupSettings()
     if (getIniPath().isEmpty())
         return false;
 
-    QFile file(getIniPath());
-
-    if (!file.open(QIODevice::ReadOnly | QIODevice::Text)) {
+    std::ifstream file(getIniPath().toStdString());
+    if (file.fail())
+    {
         emit error(tr("Failed to open Morrowind configuration file!"),
-                   tr("Opening %1 failed: %2.").arg(getIniPath(), file.errorString()));
+                   tr("Opening %1 failed: %2.").arg(getIniPath(), strerror(errno)));
         return false;
     }
 
-    QTextStream stream(&file);
-    stream.setCodec(mIniCodec);
-
-    mIniSettings.readFile(stream);
+    mIniSettings.readFile(file, mIniEncoding);
 
     return true;
 }
@@ -189,20 +186,17 @@ bool Wizard::UnshieldWorker::writeSettings()
     if (getIniPath().isEmpty())
         return false;
 
-    QFile file(getIniPath());
-
-    if (!file.open(QIODevice::ReadWrite | QIODevice::Text)) {
+    std::ifstream file(getIniPath().toStdString());
+    if (file.fail())
+    {
         emit error(tr("Failed to open Morrowind configuration file!"),
-                   tr("Opening %1 failed: %2.").arg(getIniPath(), file.errorString()));
+                   tr("Opening %1 failed: %2.").arg(getIniPath(), strerror(errno)));
         return false;
     }
 
-    QTextStream stream(&file);
-    stream.setCodec(mIniCodec);
-
-    if (!mIniSettings.writeFile(getIniPath(), stream)) {
+    if (!mIniSettings.writeFile(getIniPath(), file, mIniEncoding)) {
          emit error(tr("Failed to write Morrowind configuration file!"),
-                    tr("Writing to %1 failed: %2.").arg(getIniPath(), file.errorString()));
+                    tr("Writing to %1 failed: %2.").arg(getIniPath(), strerror(errno)));
          return false;
     }
 
diff --git a/apps/wizard/unshield/unshieldworker.hpp b/apps/wizard/unshield/unshieldworker.hpp
index 6e37e73..dcee05a 100644
--- a/apps/wizard/unshield/unshieldworker.hpp
+++ b/apps/wizard/unshield/unshieldworker.hpp
@@ -42,7 +42,7 @@ namespace Wizard
         QString getPath();
         QString getIniPath();
 
-        void setIniCodec(QTextCodec *codec);
+        void setIniEncoding(ToUTF8::FromType encoding);
 
         bool setupSettings();
 
@@ -105,7 +105,7 @@ namespace Wizard
 
         IniSettings mIniSettings;
 
-        QTextCodec *mIniCodec;
+        ToUTF8::FromType mIniEncoding;
 
         QWaitCondition mWait;
 
diff --git a/components/config/gamesettings.cpp b/components/config/gamesettings.cpp
index 183a658..49ac023 100644
--- a/components/config/gamesettings.cpp
+++ b/components/config/gamesettings.cpp
@@ -168,21 +168,16 @@ bool Config::GameSettings::readFile(QTextStream &stream, QMultiMap<QString, QStr
 bool Config::GameSettings::writeFile(QTextStream &stream)
 {
     // Iterate in reverse order to preserve insertion order
-    QMapIterator<QString, QString> i(mUserSettings);
-    i.toBack();
-
-    while (i.hasPrevious()) {
-        i.previous();
+    auto i = mUserSettings.end();
+    while (i != mUserSettings.begin())
+    {
+        i--;
 
-        // path lines (e.g. 'data=...') need quotes and ampersands escaping to match how boost::filesystem::path uses boost::io::quoted
-        if (i.key() == QLatin1String("data")
-            || i.key() == QLatin1String("data-local")
-            || i.key() == QLatin1String("resources")
-            || i.key() == QLatin1String("load-savegame"))
+        if (i.key() == QLatin1String("data") || i.key() == QLatin1String("data-local")
+            || i.key() == QLatin1String("resources") || i.key() == QLatin1String("load-savegame"))
         {
             stream << i.key() << "=";
 
-            // The following is based on boost::io::detail::quoted_manip.hpp, but calling those functions did not work as there are too may QStrings involved
             QChar delim = '\"';
             QChar escape = '&';
             QString string = i.value();
@@ -201,7 +196,6 @@ bool Config::GameSettings::writeFile(QTextStream &stream)
         }
 
         stream << i.key() << "=" << i.value() << "\n";
-
     }
 
     return true;
@@ -390,21 +384,18 @@ bool Config::GameSettings::writeFileWithComments(QFile &file)
 
     // Iterate in reverse order to preserve insertion order
     QString settingLine;
-    QMapIterator<QString, QString> it(mUserSettings);
-    it.toBack();
-
-    while (it.hasPrevious())
+    auto it = mUserSettings.end();
+    while (it != mUserSettings.begin())
     {
-        it.previous();
+        it--;
 
-        if (it.key() == QLatin1String("data")
-            || it.key() == QLatin1String("data-local")
-            || it.key() == QLatin1String("resources")
-            || it.key() == QLatin1String("load-savegame"))
+        if (it.key() == QLatin1String("data") || it.key() == QLatin1String("data-local")
+            || it.key() == QLatin1String("resources") || it.key() == QLatin1String("load-savegame"))
         {
             settingLine = it.key() + "=";
 
-            // The following is based on boost::io::detail::quoted_manip.hpp, but calling those functions did not work as there are too may QStrings involved
+            // The following is based on boost::io::detail::quoted_manip.hpp, but calling those functions did not work
+            // as there are too may QStrings involved
             QChar delim = '\"';
             QChar escape = '&';
             QString string = it.value();
@@ -433,7 +424,7 @@ bool Config::GameSettings::writeFileWithComments(QFile &file)
             if (i != commentsMap.end())
             {
                 std::vector<QString> cLines = i->second;
-                for (const auto & cLine : cLines)
+                for (const auto& cLine : cLines)
                     stream << cLine << "\n";
 
                 commentsMap.erase(i);
diff --git a/components/config/launchersettings.cpp b/components/config/launchersettings.cpp
index 4594d16..13318c3 100644
--- a/components/config/launchersettings.cpp
+++ b/components/config/launchersettings.cpp
@@ -51,11 +51,10 @@ bool Config::LauncherSettings::writeFile(QTextStream &stream)
     QRegularExpression sectionRe(QRegularExpression::anchoredPattern("([^/]+)/(.+)$"));
     QMultiMap<QString, QString> settings = SettingsBase::getSettings();
 
-    QMapIterator<QString, QString> i(settings);
-    i.toBack();
-
-    while (i.hasPrevious()) {
-        i.previous();
+    auto i = settings.end();
+    while (i != settings.begin())
+    {
+        i--;
 
         QString prefix;
         QString key;
diff --git a/components/contentselector/model/contentmodel.cpp b/components/contentselector/model/contentmodel.cpp
index 8f69f6b..57f03b0 100644
--- a/components/contentselector/model/contentmodel.cpp
+++ b/components/contentselector/model/contentmodel.cpp
@@ -192,12 +192,12 @@ QVariant ContentSelectorModel::ContentModel::data(const QModelIndex &index, int
         {
         case 0:
         case 1:
-            return Qt::AlignLeft + Qt::AlignVCenter;
+            return QVariant(Qt::AlignLeft | Qt::AlignVCenter);
         case 2:
         case 3:
-            return Qt::AlignRight + Qt::AlignVCenter;
+            return QVariant(Qt::AlignRight | Qt::AlignVCenter);
         default:
-            return Qt::AlignLeft + Qt::AlignVCenter;
+            return QVariant(Qt::AlignLeft | Qt::AlignVCenter);
         }
     }
 
