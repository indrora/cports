commit 0f8fdaffeb6bba60e3abb4d1602c171502d32348
Author: q66 <q66@chimera-linux.org>
Date:   Sun Jul 23 22:41:07 2023 +0200

    migrate regexp for qt6

diff --git a/apps/launcher/graphicspage.cpp b/apps/launcher/graphicspage.cpp
index 5cdfb57..c5bdc80 100644
--- a/apps/launcher/graphicspage.cpp
+++ b/apps/launcher/graphicspage.cpp
@@ -198,10 +198,11 @@ void Launcher::GraphicsPage::saveSettings()
     int cWidth = 0;
     int cHeight = 0;
     if (standardRadioButton->isChecked()) {
-        QRegExp resolutionRe(QString("(\\d+) x (\\d+).*"));
-        if (resolutionRe.exactMatch(resolutionComboBox->currentText().simplified())) {
-            cWidth = resolutionRe.cap(1).toInt();
-            cHeight = resolutionRe.cap(2).toInt();
+        QRegularExpression resolutionRe(QRegularExpression::anchoredPattern(QString("(\\d+) x (\\d+).*")));
+        QRegularExpressionMatch match = resolutionRe.match(resolutionComboBox->currentText().simplified());
+        if (match.hasMatch()) {
+            cWidth = match.captured(1).toInt();
+            cHeight = match.captured(2).toInt();
         }
     } else {
         cWidth = customWidthSpinBox->value();
diff --git a/apps/launcher/utils/textinputdialog.cpp b/apps/launcher/utils/textinputdialog.cpp
index 5bbcf4c..3ef9cce 100644
--- a/apps/launcher/utils/textinputdialog.cpp
+++ b/apps/launcher/utils/textinputdialog.cpp
@@ -20,7 +20,8 @@ Launcher::TextInputDialog::TextInputDialog(const QString& title, const QString &
     label->setText(text);
 
     // Line edit
-    QValidator *validator = new QRegExpValidator(QRegExp("^[a-zA-Z0-9_]*$"), this); // Alpha-numeric + underscore
+    QValidator* validator
+        = new QRegularExpressionValidator(QRegularExpression("^[a-zA-Z0-9_]*$"), this); // Alpha-numeric + underscore
     mLineEdit = new LineEdit(this);
     mLineEdit->setValidator(validator);
     mLineEdit->setCompleter(nullptr);
diff --git a/apps/wizard/inisettings.cpp b/apps/wizard/inisettings.cpp
index 198d1df..d3be2be 100644
--- a/apps/wizard/inisettings.cpp
+++ b/apps/wizard/inisettings.cpp
@@ -4,7 +4,7 @@
 #include <QFile>
 #include <QStringList>
 #include <QString>
-#include <QRegExp>
+#include <QRegularExpression>
 #include <QDebug>
 
 Wizard::IniSettings::IniSettings()
@@ -35,12 +35,12 @@ bool Wizard::IniSettings::readFile(QTextStream &stream)
     // Look for a square bracket, "'\\["
     // that has one or more "not nothing" in it, "([^]]+)"
     // and is closed with a square bracket, "\\]"
-    QRegExp sectionRe(QLatin1String("^\\[([^]]+)\\]"));
+    QRegularExpression sectionRe(QRegularExpression::anchoredPattern("^\\[([^]]+)\\]"));
 
     // Find any character(s) that is/are not equal sign(s), "[^=]+"
     // followed by an optional whitespace, an equal sign, and another optional whitespace, "\\s*=\\s*"
     // and one or more periods, "(.+)"
-    QRegExp keyRe(QLatin1String("^([^=]+)\\s*=\\s*(.+)$"));
+    QRegularExpression keyRe(QLatin1String("^([^=]+)\\s*=\\s*(.+)$"));
 
     QString currentSection;
 
@@ -51,14 +51,18 @@ bool Wizard::IniSettings::readFile(QTextStream &stream)
         if (line.isEmpty() || line.startsWith(QLatin1Char(';')))
             continue;
 
-        if (sectionRe.exactMatch(line))
+        QRegularExpressionMatch sectionMatch = sectionRe.match(line);
+        if (sectionMatch.hasMatch())
         {
-            currentSection = sectionRe.cap(1);
+            currentSection = sectionMatch.captured(1);
+            continue;
         }
-        else if (keyRe.indexIn(line) != -1)
+
+        QRegularExpressionMatch match = keyRe.match(line);
+        if (match.hasMatch())
         {
-            QString key = keyRe.cap(1).trimmed();
-            QString value = keyRe.cap(2).trimmed();
+            QString key = match.captured(1).trimmed();
+            QString value = match.captured(2).trimmed();
 
             // Append the section, but only if there is one
             if (!currentSection.isEmpty())
@@ -76,12 +80,12 @@ bool Wizard::IniSettings::writeFile(const QString &path, QTextStream &stream)
     // Look for a square bracket, "'\\["
     // that has one or more "not nothing" in it, "([^]]+)"
     // and is closed with a square bracket, "\\]"
-    QRegExp sectionRe(QLatin1String("^\\[([^]]+)\\]"));
+    QRegularExpression sectionRe(QRegularExpression::anchoredPattern("^\\[([^]]+)\\]"));
 
     // Find any character(s) that is/are not equal sign(s), "[^=]+"
     // followed by an optional whitespace, an equal sign, and another optional whitespace, "\\s*=\\s*"
     // and one or more periods, "(.+)"
-    QRegExp keyRe(QLatin1String("^([^=]+)\\s*=\\s*(.+)$"));
+    QRegularExpression keyRe(QLatin1String("^([^=]+)\\s*=\\s*(.+)$"));
 
     const QStringList keys(mSettings.keys());
 
@@ -97,11 +101,16 @@ bool Wizard::IniSettings::writeFile(const QString &path, QTextStream &stream)
             continue;
         }
 
-        if (sectionRe.exactMatch(line)) {
+        QRegularExpressionMatch sectionMatch = sectionRe.match(line);
+        if (sectionMatch.hasMatch()) {
             buffer.append(line + QLatin1String("\n"));
-            currentSection = sectionRe.cap(1);
-        } else  if (keyRe.indexIn(line) != -1) {
-            QString key(keyRe.cap(1).trimmed());
+            currentSection = sectionMatch.captured(1);
+            continue;
+        }
+
+        QRegularExpressionMatch match = keyRe.match(line);
+        if (match.hasMatch()) {
+            QString key(match.captured(1).trimmed());
             QString lookupKey(key);
 
             // Append the section, but only if there is one
diff --git a/components/config/gamesettings.cpp b/components/config/gamesettings.cpp
index b59c343..1c927d9 100644
--- a/components/config/gamesettings.cpp
+++ b/components/config/gamesettings.cpp
@@ -3,7 +3,7 @@
 
 #include <QTextCodec>
 #include <QDir>
-#include <QRegExp>
+#include <QRegularExpression>
 
 #include <components/files/configurationmanager.hpp>
 
@@ -93,7 +93,7 @@ bool Config::GameSettings::readUserFile(QTextStream &stream, bool ignoreContent)
 bool Config::GameSettings::readFile(QTextStream &stream, QMultiMap<QString, QString> &settings, bool ignoreContent)
 {
     QMultiMap<QString, QString> cache;
-    QRegExp keyRe("^([^=]+)\\s*=\\s*(.+)$");
+    QRegularExpression keyRe("^([^=]+)\\s*=\\s*(.+)$");
 
     while (!stream.atEnd()) {
         QString line = stream.readLine();
@@ -101,10 +101,11 @@ bool Config::GameSettings::readFile(QTextStream &stream, QMultiMap<QString, QStr
         if (line.isEmpty() || line.startsWith("#"))
             continue;
 
-        if (keyRe.indexIn(line) != -1) {
+        QRegularExpressionMatch match = keyRe.match(line);
+        if (match.hasMatch()) {
 
-            QString key = keyRe.cap(1).trimmed();
-            QString value = keyRe.cap(2).trimmed();
+            QString key = match.captured(1).trimmed();
+            QString value = match.captured(2).trimmed();
 
             // Don't remove composing entries
             if (key != QLatin1String("data")
@@ -208,13 +209,13 @@ bool Config::GameSettings::writeFile(QTextStream &stream)
 
 bool Config::GameSettings::isOrderedLine(const QString& line)
 {
-    return line.contains(QRegExp("^\\s*fallback-archive\\s*="))
-           || line.contains(QRegExp("^\\s*fallback\\s*="))
-           || line.contains(QRegExp("^\\s*data\\s*="))
-           || line.contains(QRegExp("^\\s*data-local\\s*="))
-           || line.contains(QRegExp("^\\s*resources\\s*="))
-           || line.contains(QRegExp("^\\s*groundcover\\s*="))
-           || line.contains(QRegExp("^\\s*content\\s*="));
+    return line.contains(QRegularExpression("^\\s*fallback-archive\\s*="))
+        || line.contains(QRegularExpression("^\\s*fallback\\s*="))
+        || line.contains(QRegularExpression("^\\s*data\\s*="))
+        || line.contains(QRegularExpression("^\\s*data-local\\s*="))
+        || line.contains(QRegularExpression("^\\s*resources\\s*="))
+        || line.contains(QRegularExpression("^\\s*groundcover\\s*="))
+        || line.contains(QRegularExpression("^\\s*content\\s*="));
 }
 
 // Policy:
@@ -273,7 +274,7 @@ bool Config::GameSettings::writeFileWithComments(QFile &file)
     //        +----------------------------------------------------------+
     //
     //
-    QRegExp settingRegex("^([^=]+)\\s*=\\s*([^,]+)(.*)$");
+    QRegularExpression settingRegex("^([^=]+)\\s*=\\s*([^,]+)(.*)$");
     std::vector<QString> comments;
     auto commentStart = fileCopy.end();
     std::map<QString, std::vector<QString> > commentsMap;
@@ -284,9 +285,10 @@ bool Config::GameSettings::writeFileWithComments(QFile &file)
             // save in a separate map of comments keyed by "ordered" line
             if (!comments.empty())
             {
-                if (settingRegex.indexIn(*iter) != -1)
+                QRegularExpressionMatch match = settingRegex.match(*iter);
+                if (match.hasMatch())
                 {
-                    commentsMap[settingRegex.cap(1)+"="+settingRegex.cap(2)] = comments;
+                    commentsMap[match.captured(1) + "=" + match.captured(2)] = comments;
                     comments.clear();
                     commentStart = fileCopy.end();
                 }
@@ -295,14 +297,14 @@ bool Config::GameSettings::writeFileWithComments(QFile &file)
 
             *iter = QString(); // "ordered" lines to be removed later
         }
-        else if ((*iter).isEmpty() || (*iter).contains(QRegExp("^\\s*#")))
+        else if ((*iter).isEmpty() || (*iter).contains(QRegularExpression("^\\s*#")))
         {
             // comment line, save in temp buffer
             if (comments.empty())
                 commentStart = iter;
 
             // special removed content processing
-            if ((*iter).contains(QRegExp("^##content\\s*=")))
+            if ((*iter).contains(QRegularExpression("^##content\\s*=")))
             {
                 if (!comments.empty())
                 {
@@ -318,11 +320,11 @@ bool Config::GameSettings::writeFileWithComments(QFile &file)
         }
         else
         {
-            int index = settingRegex.indexIn(*iter);
+            QRegularExpressionMatch match = settingRegex.match(*iter);
 
             // blank or non-"ordered" line, write saved comments
-            if (!comments.empty() && index != -1 && settingRegex.captureCount() >= 2 &&
-                mUserSettings.find(settingRegex.cap(1)) != mUserSettings.end())
+            if (!comments.empty() && match.hasMatch() && settingRegex.captureCount() >= 2
+                && mUserSettings.find(match.captured(1)) != mUserSettings.end())
             {
                 if (commentStart == fileCopy.end())
                     throw std::runtime_error("Config::GameSettings: failed to parse settings - iterator is past of end of settings file");
@@ -339,10 +341,10 @@ bool Config::GameSettings::writeFileWithComments(QFile &file)
             // keep blank lines and non-"ordered" lines other than comments
 
             // look for a key in the line
-            if (index == -1 || settingRegex.captureCount() < 2)
+            if (!match.hasMatch() || settingRegex.captureCount() < 2)
             {
                 // no key or first part of value found in line, replace with a null string which
-                // will be remved later
+                // will be removed later
                 *iter = QString();
                 comments.clear();
                 commentStart = fileCopy.end();
@@ -351,15 +353,16 @@ bool Config::GameSettings::writeFileWithComments(QFile &file)
 
             // look for a matching key in user settings
             *iter = QString(); // assume no match
-            QString key = settingRegex.cap(1);
-            QString keyVal = settingRegex.cap(1)+"="+settingRegex.cap(2);
+            QString key = match.captured(1);
+            QString keyVal = match.captured(1) + "=" + match.captured(2);
             QMultiMap<QString, QString>::const_iterator i = mUserSettings.find(key);
             while (i != mUserSettings.end() && i.key() == key)
             {
                 QString settingLine = i.key() + "=" + i.value();
-                if (settingRegex.indexIn(settingLine) != -1)
+                QRegularExpressionMatch keyMatch = settingRegex.match(settingLine);
+                if (keyMatch.hasMatch())
                 {
-                    if ((settingRegex.cap(1)+"="+settingRegex.cap(2)) == keyVal)
+                    if ((keyMatch.captured(1) + "=" + keyMatch.captured(2)) == keyVal)
                     {
                         *iter = settingLine;
                         break;
@@ -378,7 +381,7 @@ bool Config::GameSettings::writeFileWithComments(QFile &file)
 
         // Below is based on readFile() code, if that changes corresponding change may be
         // required (for example duplicates may be inserted if the rules don't match)
-        if (/*(*iter).isEmpty() ||*/ iter.contains(QRegExp("^\\s*#")))
+        if (/*(*iter).isEmpty() ||*/ iter.contains(QRegularExpression("^\\s*#")))
         {
             stream << iter << "\n";
             continue;
@@ -418,13 +421,14 @@ bool Config::GameSettings::writeFileWithComments(QFile &file)
         else
             settingLine = it.key() + "=" + it.value();
 
-        if (settingRegex.indexIn(settingLine) != -1)
+        QRegularExpressionMatch match = settingRegex.match(settingLine);
+        if (match.hasMatch())
         {
-            auto i = commentsMap.find(settingRegex.cap(1)+"="+settingRegex.cap(2));
+            auto i = commentsMap.find(match.captured(1) + "=" + match.captured(2));
 
             // check if previous removed content item with comments
             if (i == commentsMap.end())
-                i = commentsMap.find("##"+settingRegex.cap(1)+"="+settingRegex.cap(2));
+                i = commentsMap.find("##" + match.captured(1) + "=" + match.captured(2));
 
             if (i != commentsMap.end())
             {
@@ -445,7 +449,7 @@ bool Config::GameSettings::writeFileWithComments(QFile &file)
         auto i = commentsMap.begin();
         for (; i != commentsMap.end(); ++i)
         {
-            if (i->first.contains(QRegExp("^\\s*content\\s*=")))
+            if (i->first.contains(QRegularExpression("^\\s*content\\s*=")))
             {
                 std::vector<QString> cLines = i->second;
                 for (const auto & cLine : cLines)
diff --git a/components/config/launchersettings.cpp b/components/config/launchersettings.cpp
index 11ced3c..4594d16 100644
--- a/components/config/launchersettings.cpp
+++ b/components/config/launchersettings.cpp
@@ -1,12 +1,11 @@
 #include "launchersettings.hpp"
 
+#include <QDebug>
 #include <QTextStream>
 #include <QString>
-#include <QRegExp>
+#include <QRegularExpression>
 #include <QMultiMap>
 
-#include <QDebug>
-
 #include <components/files/configurationmanager.hpp>
 
 const char Config::LauncherSettings::sCurrentContentListKey[] = "Profiles/currentprofile";
@@ -21,16 +20,16 @@ QStringList Config::LauncherSettings::subKeys(const QString &key)
     QMultiMap<QString, QString> settings = SettingsBase::getSettings();
     QStringList keys = settings.uniqueKeys();
 
-    QRegExp keyRe("(.+)/");
+    QRegularExpression keyRe("(.+)/");
 
     QStringList result;
 
     for (const QString &currentKey : keys)
     {
-
-        if (keyRe.indexIn(currentKey) != -1)
+        QRegularExpressionMatch match = keyRe.match(currentKey);
+        if (match.hasMatch())
         {
-            QString prefixedKey = keyRe.cap(1);
+            QString prefixedKey = match.captured(1);
 
             if(prefixedKey.startsWith(key))
             {
@@ -49,7 +48,7 @@ QStringList Config::LauncherSettings::subKeys(const QString &key)
 bool Config::LauncherSettings::writeFile(QTextStream &stream)
 {
     QString sectionPrefix;
-    QRegExp sectionRe("([^/]+)/(.+)$");
+    QRegularExpression sectionRe(QRegularExpression::anchoredPattern("([^/]+)/(.+)$"));
     QMultiMap<QString, QString> settings = SettingsBase::getSettings();
 
     QMapIterator<QString, QString> i(settings);
@@ -61,9 +60,10 @@ bool Config::LauncherSettings::writeFile(QTextStream &stream)
         QString prefix;
         QString key;
 
-        if (sectionRe.exactMatch(i.key())) {
-             prefix = sectionRe.cap(1);
-             key = sectionRe.cap(2);
+        QRegularExpressionMatch match = sectionRe.match(i.key());
+        if (match.hasMatch()) {
+            prefix = match.captured(1);
+            key = match.captured(2);
         }
 
         // Get rid of legacy settings
diff --git a/components/config/settingsbase.hpp b/components/config/settingsbase.hpp
index 595fb9d..3b2b5f4 100644
--- a/components/config/settingsbase.hpp
+++ b/components/config/settingsbase.hpp
@@ -4,7 +4,7 @@
 #include <QTextStream>
 #include <QStringList>
 #include <QString>
-#include <QRegExp>
+#include <QRegularExpression>
 
 namespace Config
 {
@@ -51,8 +51,8 @@ namespace Config
 
             QString sectionPrefix;
 
-            QRegExp sectionRe("^\\[([^]]+)\\]");
-            QRegExp keyRe("^([^=]+)\\s*=\\s*(.+)$");
+            QRegularExpression sectionRe(QRegularExpression::anchoredPattern("^\\[([^]]+)\\]"));
+            QRegularExpression keyRe("^([^=]+)\\s*=\\s*(.+)$");
 
             while (!stream.atEnd()) {
                 QString line = stream.readLine();
@@ -60,16 +60,18 @@ namespace Config
                 if (line.isEmpty() || line.startsWith("#"))
                     continue;
 
-                if (sectionRe.exactMatch(line)) {
-                    sectionPrefix = sectionRe.cap(1);
+                QRegularExpressionMatch sectionMatch = sectionRe.match(line);
+                if (sectionMatch.hasMatch()) {
+                    sectionPrefix = sectionMatch.captured(1);
                     sectionPrefix.append("/");
                     continue;
                 }
 
-                if (keyRe.indexIn(line) != -1) {
+                QRegularExpressionMatch match = keyRe.match(line);
+                if (match.hasMatch()) {
 
-                    QString key = keyRe.cap(1).trimmed();
-                    QString value = keyRe.cap(2).trimmed();
+                    QString key = match.captured(1).trimmed();
+                    QString value = match.captured(2).trimmed();
 
                     if (!sectionPrefix.isEmpty())
                         key.prepend(sectionPrefix);
diff --git a/components/contentselector/model/esmfile.cpp b/components/contentselector/model/esmfile.cpp
index 60ca199..76b69c2 100644
--- a/components/contentselector/model/esmfile.cpp
+++ b/components/contentselector/model/esmfile.cpp
@@ -1,6 +1,7 @@
 #include "esmfile.hpp"
 
 #include <QDataStream>
+#include <QIODevice>
 
 int ContentSelectorModel::EsmFile::sPropertyCount = 7;
 QString ContentSelectorModel::EsmFile::sToolTip = QString("<b>Author:</b> %1<br/> \
diff --git a/components/contentselector/view/combobox.cpp b/components/contentselector/view/combobox.cpp
index 3108062..269936b 100644
--- a/components/contentselector/view/combobox.cpp
+++ b/components/contentselector/view/combobox.cpp
@@ -8,7 +8,8 @@
 ContentSelectorView::ComboBox::ComboBox(QWidget *parent) :
     QComboBox(parent)
 {
-    mValidator = new QRegExpValidator(QRegExp("^[a-zA-Z0-9_]*$"), this); // Alpha-numeric + underscore
+    mValidator
+        = new QRegularExpressionValidator(QRegularExpression("^[a-zA-Z0-9_]*$"), this); // Alpha-numeric + underscore
     setValidator(mValidator);
     setEditable(true);
     setCompleter(nullptr);
diff --git a/components/contentselector/view/combobox.hpp b/components/contentselector/view/combobox.hpp
index ebca824..53ca840 100644
--- a/components/contentselector/view/combobox.hpp
+++ b/components/contentselector/view/combobox.hpp
@@ -4,7 +4,7 @@
 #include <QComboBox>
 
 class QString;
-class QRegExpValidator;
+class QRegularExpressionValidator;
 
 namespace ContentSelectorView
 {
@@ -22,7 +22,7 @@ namespace ContentSelectorView
 
     protected:
         void paintEvent(QPaintEvent *) override;
-        QRegExpValidator *mValidator;
+        QRegularExpressionValidator* mValidator;
     };
 }
 
diff --git a/components/contentselector/view/contentselector.cpp b/components/contentselector/view/contentselector.cpp
index 0a12b01..c221bb1 100644
--- a/components/contentselector/view/contentselector.cpp
+++ b/components/contentselector/view/contentselector.cpp
@@ -58,7 +58,7 @@ void ContentSelectorView::ContentSelector::buildAddonView()
     ui.addonView->setVisible (true);
 
     mAddonProxyModel = new AddOnProxyModel(this);
-    mAddonProxyModel->setFilterRegExp(searchFilter()->text());
+    mAddonProxyModel->setFilterRegularExpression(searchFilter()->text());
     mAddonProxyModel->setFilterCaseSensitivity(Qt::CaseInsensitive);
     mAddonProxyModel->setDynamicSortFilter (true);
     mAddonProxyModel->setSourceModel (mContentModel);
